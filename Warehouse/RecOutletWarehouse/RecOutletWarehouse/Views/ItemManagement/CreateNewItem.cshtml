@using System.Web.Optimization;
@model RecOutletWarehouse.Controllers.ItemManagementController.ItemCreationViewModel

@{
    ViewBag.Title = "Item Creation";
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}

@section tabnavigation{
    <ul class="nav clearfix">
        <li>@Html.ActionLink("Item Management","BrowseItemManagement")</li>
        <li class="active">@Html.ActionLink("Create New Item","CreateNewItem")</li>
        <li>@Html.ActionLink("Print Item Labels","PrintLabels")</li>
        <li>@Html.ActionLink("Item Characteristics","ItemCharacteristics")</li>
    </ul>  
}

<h2>Create a New Item</h2>
<ul class="field-validation-error">
    <li>
        TODO: Implement Ajax Autocomplete on the Product Line field. Make sure it sorts on the Vendor Name provided, not just the user's query string!
    </li>
</ul>
@if(ViewBag.ItemSuccessfulInsert != null){
<ul>
    <li class="successful-insert">@ViewBag.ItemSuccessfulInsert</li>
</ul>
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Vendor Information</legend>
        <table>
            <tr>
                <td>Vendor Name:<strong class="required">*</strong></td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.VendorName, new { @id = "vendor" })
                        @Html.ValidationMessageFor(model => model.VendorName)
                    </div>
                </td>
                <td>&nbsp Product Line:<strong class="required">*</strong></td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Item.PRODUCT_LINE.ProductLineName, new { @id = "productLine" })
                        @Html.ValidationMessageFor(model => model.Item.PRODUCT_LINE.ProductLineName)
                    </div>
                </td>
                <td>&nbsp Vendor's Item #:<strong class="required">*</strong></td>
                <td>
                    <div class="editor-field">
                        @Html.EditorFor(model => model.Item.VendorItemID)
                        @Html.ValidationMessageFor(model => model.Item.VendorItemID)
                        <a href="#" title="This is the vendor's internal ID for this item.">What's this?</a>
                    </div>    
                </td>
            </tr>
            <tr>
                <td colspan="2"><input type="button" class="button" onclick="JavaScript:newPopup('@Url.Action("AddVendor", "Vendor")    ');" value="Add a new Vendor" /></td>
                <td colspan="2"><input type="button" class="button" onclick="JavaScript:newPopup('@Url.Action("CreateNewPL", "Vendor")    ');" value="Add a new Product Line" /></td>
            </tr>
        </table>

    </fieldset>
    <fieldset>
        <legend>Item Information</legend>
        <table>
            <tr>
                <td>Item UPC:</td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Item.ItemUPC)
                        @Html.ValidationMessageFor(model => model.Item.ItemUPC)
                    </div>
                </td>
                <td>&nbsp Item Name:<strong class="required">*</strong></td>
                <td >
                    <div class="editor-field">
                        @Html.EditorFor(model => model.Item.Name)
                        @Html.ValidationMessageFor(model => model.Item.Name)
                    </div>
                </td>
                 <td>&nbsp Legacy Item ID:</td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Item.LegacyID, new { @class = "ItemLegId" })
                        @Html.ValidationMessageFor(model => model.Item.LegacyID)
                    </div>
                </td>
            </tr>
            <tr>
                <td colspan="6">
                    <div class="editor-field">
                        Type a description for the item:<strong class="required">*</strong><br />
                        @Html.TextAreaFor(model => model.Item.Description, new { rows = 5, cols = 30 })
                        @Html.ValidationMessageFor(model => model.Item.Description)
                    </div>
                </td>
            </tr>
            <tr>
                <td>Department:<strong class="required">*</strong></td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Item.ITEM_DEPARTMENT.DepartmentName, new { @id = "dept" })
                        @Html.ValidationMessageFor(model => model.Item.ITEM_DEPARTMENT.DepartmentName)
                    </div>
                </td>
                <td>&nbsp Category:<strong class="required">*</strong></td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Item.ITEM_CATEGORY.CategoryName, new { @id = "cat" })
                        @Html.ValidationMessageFor(model => model.Item.ITEM_CATEGORY.CategoryName)
                    </div>
                </td>
                <td>&nbsp Sub-category:<strong class="required">*</strong></td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Item.ITEM_SUBCATEGORY.SubcategoryName, new { @id = "subcat" })
                        @Html.ValidationMessageFor(model => model.Item.ITEM_SUBCATEGORY.SubcategoryName)
                    </div>
                </td>
            </tr>
            <tr>
                <td colspan="6"><input type="button" onclick="JavaScript:newPopup('@Url.Action("addNewDeptCatSubcat", "ItemManagement")    ');" class="button" value="Add a new Department, Category, and/or Subcategory" /></td>
            </tr>
            <tr>
                <td colspan="2">
                    <div class="editor-field">
                        @Html.Hidden("dept-id", -1, new { @class = "rpc-preview", @id="dept-id" })
                        @Html.Hidden("cat-id", -1, new { @class = "rpc-preview", @id="cat-id" })
                        @Html.Hidden("sub-id", -1, new { @class = "rpc-preview", @id="sub-id"})
                        @Html.Hidden("item-id", -1, new { @class = "rpc-preview", @id="item-id"})
                            <input type="button" class="button" id="rpc-button" value="Generate RPC" />
                    </div>
                </td>
                <td colspan="4">
                    <p>Item RPC Preview: <span id="rpc-preview"></span></p>
                </td>
            </tr>
        </table>
    </fieldset>
    
    <fieldset>
        <legend>Pricing and Other Sale Information</legend>

        <table>
            <tr>
                <td>MSRP:</td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Item.MSRP, new { @class = "ItemPrice" })
                        @Html.ValidationMessageFor(model => model.Item.MSRP)
                    </div>
                </td>
                <td>&nbsp Regular Selling Price:<strong class="required">*</strong></td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Item.SellPrice, new { @class = "ItemPrice" })
                        @Html.ValidationMessageFor(model => model.Item.SellPrice)
                    </div>
                </td>
                <td>&nbsp Restricted Age:</td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Item.RestrictedAge, new { @class = "ItemAge" })
                        @Html.ValidationMessageFor(model => model.Item.RestrictedAge)
                    </div>
                </td>
            </tr>
            <tr>
                <td colspan="2">Seasonal Code<strong class="required">*</strong></td>
                <td colspan="5">
                    <div class="editor-field">
                        @Html.RadioButtonFor(model => model.Item.SeasonCode, "All", new { Checked = "checked"}) All                      
                        @Html.RadioButtonFor(model => model.Item.SeasonCode, "Fall") Fall
                        @Html.RadioButtonFor(model => model.Item.SeasonCode, "Winter") Winter 
                        @Html.RadioButtonFor(model => model.Item.SeasonCode, "Spring") Spring
                        @Html.RadioButtonFor(model => model.Item.SeasonCode, "Summer") Summer
                        @Html.ValidationMessageFor(model => model.Item.SeasonCode)
                    </div>
                </td>
            </tr>
        </table>

    </fieldset>
    
        <p>
            <input type="submit" value="Create New Item" onclick="submit()" class="button"/>
            <input type="submit" value="Create Item and Print Labels" name="labelRedirect" onclick="submit()" class="button"/>
            <input type='button' value="Cancel" onclick="prompt()" class="button"/>
        </p>

}


<!--"What's this?" Tooltip-->
<script>
    $(function() {
        $(document).tooltip();
    });
</script>

<!--Confirmation alerts follow-->
<script>
    $(function () {
        $("#vendor").focus();
    });

    //window.onbeforeunload = function () {
    //    return "Changes to new item will not be saved.";
    //};

    function prompt() {
        var p = confirm("Changes to item have not been saved! Continue?");

        if (p == true) {
            window.location = "@Url.Action("Index", "Home")"
        }
    }

    function submit() {
        var p = confirm("New item has been created!");

        if (p == true) {
            window.location = "@Url.Action("Index", "Home")"
        }
    }
</script>

<!--Autocomplete scripts follow-->
<script type="text/javascript">
    var url = '@Url.RouteUrl("DefaultApi",
    new { httproute = "", controller = "VendorApi" })';
    $('#vendor').autocomplete({
        autoFocus: true,
        source: function (request, response) {
            $.ajax({
                url: url,
                data: { query: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.VendorName
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#vendor').val(ui.item.label);
            $('#Id').val(ui.item.label);
            return false;
        },
        minLength: 1
    });

    var url2 = '@Url.RouteUrl("DefaultApi",
    new { httproute = "", controller = "ProductLineApi" })';
    $('#productLine').autocomplete({
        autoFocus: true,
        source: function (request, response) {
            $.ajax({
                url: url2,
                data: { query: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.ProductLineName
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#productLine').val(ui.item.label);
            $('#Id').val(ui.item.label);
            return false;
        },
        minLength: 1
    });

    var url3 = '@Url.RouteUrl("DefaultApi",
    new { httproute = "", controller = "DepartmentApi" })';
    $('#dept').autocomplete({
        autoFocus: true,
        source: function (request, response) {
            $.ajax({
                url: url3,
                data: { query: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    //alert("success " + data);
                    response($.map(data, function (item) {
                        //alert("response: " + item);
                        //alert("departmentName: "+item.DepartmentName);
                        return {
                            label: item.DepartmentName,
                            id: item.DepartmentID
                        }
                    }));
                },
                error: function(data){
                    alert("error: " + data);
                }
            });
        },
        select: function (event, ui) {
            $('#dept').val(ui.item.label);
            $('#dept-id').val(ui.item.id);
            return false;
        },
        minLength: 1
    });

    var url4 = '@Url.RouteUrl("DefaultApi",
    new { httproute = "", controller = "CategoryApi" })';
    $('#cat').autocomplete({
        autoFocus: true,
        source: function (request, response) {
            $.ajax({
                url: url4,
                data: { query: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.CategoryName,
                            id: item.CategoryID
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#cat').val(ui.item.label);
            $('#cat-id').val(ui.item.id);
            return false;
        },
        minLength: 1
    });

    var url5 = '@Url.RouteUrl("DefaultApi",
    new { httproute = "", controller = "SubcategoryApi" })';
    $('#subcat').autocomplete({
        autoFocus: true,
        source: function (request, response) {
            $.ajax({
                url: url5,
                data: { query: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.SubcategoryName,
                            id: item.SubcategoryID
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#subcat').val(ui.item.label);
            $('#sub-id').val(ui.item.id);
            return false;
        },
        minLength: 1
    });

    $(function() {

    });

    $(function() {
        $('#rpc-button')
            .click(function() {
                $.ajax({
                    async: false,
                    url:'@Url.Action("getNextItemID", "ItemManagement")',
                    data:
                        {
                            dept: $('#dept-id').attr( 'value' ),
                            cat: $('#cat-id').attr( 'value' ),
                            subcat: $('#sub-id').attr( 'value' )
                        },
                    dataType: 'JSON',
                    type:'GET'
                }).done(function(data) {
                    $("#item-id").val(data.nextItemID);
                })

                @*var array = @Html.Raw(Json.Encode(@ViewBag.Array));*@
                var myBool = 0;

                var val1 = $('#dept-id').attr( 'value' );
                var val2 = $('#cat-id').attr( 'value' );
                var val3 = $('#sub-id').attr( 'value' );
                var val4 = "";
                var val5 = "";
                var val6 = $('#item-id').attr( 'value' );

                var predictedRPC = FormatRPC(val1, val2, val6, val3);

                if( val1 > -1 && val2 > -1 && val3 > -1)
                {
                    if(val2 < 10)
                    {
                        val4 = "0";
                    }

                    if(val3 < 10)
                    {
                        val5 = "00";
                    }
                    else if(val3 < 100)
                    {
                        val5 = "0";
                    }
                    
                    $('#rpc-preview').text( predictedRPC );
                    
                }
                else
                {
                    $('#rpc-preview').text( "Please enter a department, category and subcategory." );
                }
            })
    });

    function FormatRPC(dept, cat, subcat, itemno){
        dept = sprintf("%02s", dept);
        cat = sprintf("%03s", cat);
        subcat = sprintf("%03s", subcat);
        itemno = sprintf("%06s", itemno);

        return dept + cat + itemno + subcat;
    }
</script> 

<script type="text/javascript">
    // Popup window code
    function newPopup(url) {
        popupWindow = window.open(
            url, 'popUpWindow', 'height=700,width=800,left=10,top=10,resizable=yes,scrollbars=yes,toolbar=yes,menubar=no,location=no,directories=no,status=yes')
    }
</script>

<!--Validation scripts-->
@section eofScripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/sprintf.min.js")
}
