@using System.Web.Optimization;
@model RecOutletWarehouse.Models.ItemManagement.Item

@{
    ViewBag.Title = "Item Creation";
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}

@section tabnavigation{
    <ul class="nav clearfix">
        <li class="active">@Html.ActionLink("Create New Item","CreateNewItem")</li>
        <li>@Html.ActionLink("Print Item Labels","PrintLabels")</li>
    </ul>  
}

<h2>Add a New Item to the Database</h2>
@if(ViewBag.ItemSuccessfulInsert != null){
<ul>
    <li class="successful-insert">@ViewBag.ItemSuccessfulInsert</li>
</ul>
}

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Vendor Information</legend>
        <table>
            <tr>
                <td>Vendor Name<strong class="required">*</strong></td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Vendor, new { @id = "vendor" })
                        @Html.ValidationMessageFor(model => model.Vendor)
                    </div>
                </td>
                <td>Product Line<strong class="required">*</strong></td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.ProductLine, new { @id = "productLine" })
                        @Html.ValidationMessageFor(model => model.ProductLine)
                    </div>
                </td>
                <td>Vendor's Item #<strong class="required">*</strong></td>
                <td>
                    <div class="editor-field">
                        @Html.EditorFor(model => model.VendorItemID)
                        @Html.ValidationMessageFor(model => model.VendorItemID)
                        <a href="#" title="This is the vendor's internal ID for this item.">What's this?</a>
                    </div>    
                </td>
            </tr>
        </table>

    </fieldset>
    <fieldset>
        <legend>Item Information</legend>
        <table>
            <tr>
                <td>Item UPC</td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.UPC)
                        @Html.ValidationMessageFor(model => model.UPC)
                    </div>
                </td>
                <td>Item Name<strong class="required">*</strong></td>
                <td >
                    <div class="editor-field">
                        @Html.EditorFor(model => model.ItemName)
                        @Html.ValidationMessageFor(model => model.ItemName)
                    </div>
                </td>
                 <td>Legacy Item ID:</td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Legacy)
                        @Html.ValidationMessageFor(model => model.Legacy)
                    </div>
                </td>
            </tr>
            <tr>
                <td colspan="6">
                    <div class="editor-field">
                        Type a description for the item<strong class="required">*</strong><br />
                        @Html.TextAreaFor(model => model.ItemDescription)
                        @Html.ValidationMessageFor(model => model.ItemDescription)
                    </div>
                </td>
            </tr>
            <tr>
                <td>Department<strong class="required">*</strong></td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Department, new { @id = "dept" })
                        @Html.ValidationMessageFor(model => model.Department)
                    </div>
                </td>
                <td>Category<strong class="required">*</strong></td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Category, new { @id = "cat" })
                        @Html.ValidationMessageFor(model => model.Category)
                    </div>
                </td>
                <td>Sub-category<strong class="required">*</strong></td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Subcategory, new { @id = "subcat" })
                        @Html.ValidationMessageFor(model => model.Subcategory)
                    </div>
                </td>
            </tr>
        </table>

    </fieldset>
    
    <fieldset>
        <legend>Pricing and Other Sale Information</legend>

        <table>
            <tr>
                <td>MSRP</td>
                <td>
                    <div class="editor-field">
                        @Html.EditorFor(model => model.MSRP)
                        @Html.ValidationMessageFor(model => model.MSRP)
                    </div>
                </td>
                <td>Regular Selling Price<strong class="required">*</strong></td>
                <td>
                    <div class="editor-field">
                        @Html.EditorFor(model => model.SellPrice)
                        @Html.ValidationMessageFor(model => model.SellPrice)
                    </div>
                </td>
                <td>Restricted Age</td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.restrictedAge)
                        @Html.ValidationMessageFor(model => model.restrictedAge)
                    </div>
                </td>
            </tr>
            <tr>
                <td>Seasonal Code<strong class="required">*</strong></td>
                <td colspan="5">
                    <div class="editor-field">
                        @Html.RadioButtonFor(model => model.SeasonCode, "All") All                      
                        @Html.RadioButtonFor(model => model.SeasonCode, "Fall") Fall
                        @Html.RadioButtonFor(model => model.SeasonCode, "Winter") Winter 
                        @Html.RadioButtonFor(model => model.SeasonCode, "Spring") Spring
                        @Html.RadioButtonFor(model => model.SeasonCode, "Summer") Summer
                        @Html.ValidationMessageFor(model => model.SeasonCode)
                    </div>
                </td>
            </tr>
        </table>

    </fieldset>
    <!--Fields that still need to be worked with-->@*
        <div class="editor-label">
            @Html.LabelFor(model => model.RecRPC)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.RecRPC)
            @Html.ValidationMessageFor(model => model.RecRPC)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.ItemId)
        </div>
        <div class="editor-field">
            @Html.ValidationMessageFor(model => model.ItemId)
        </div>*@
    <!--End TODOS-->
    
        <p>
            <input type="submit" value="Create New Item" onclick="submit()" class="button"/>
            <input type="submit" value="Create Item and Print Labels" name="labelRedirect" onclick="submit()" class="button"/>
            <input type='button' value="Cancel" onclick="prompt()" class="button"/>
        </p>

}

<!--"What's this?" Tooltip-->
<script>
    $(function() {
        $(document).tooltip();
    });
</script>

<!--Confirmation alerts follow-->
<script>
    $(function () {
        $("#vendor").focus();
    });

    //window.onbeforeunload = function () {
    //    return "Changes to new item will not be saved.";
    //};

    function prompt() {
        var p = confirm("Changes to item have not been saved! Continue?");

        if (p == true) {
            window.location = "@Url.Action("Index", "Home")"
        }
    }

    function submit() {
        var p = confirm("New item has been created!");

        if (p == true) {
            window.location = "@Url.Action("Index", "Home")"
        }
    }
</script>

<!--Autocomplete scripts follow-->
<script type="text/javascript">
    var url = '@Url.RouteUrl("DefaultApi", 
    new { httproute = "", controller = "VendorApi" })';
    $('#vendor').autocomplete({
        autoFocus: true,
        source: function (request, response) {
            $.ajax({
                url: url,
                data: { query: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.VendorName
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#vendor').val(ui.item.label);
            $('#Id').val(ui.item.label);
            return false;
        },
        minLength: 1
    });

    var url2 = '@Url.RouteUrl("DefaultApi", 
    new { httproute = "", controller = "ProductLineApi" })';
    $('#productLine').autocomplete({
        autoFocus: true,
        source: function (request, response) {
            $.ajax({
                url: url2,
                data: { query: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.ProductLineName
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#productLine').val(ui.item.label);
            $('#Id').val(ui.item.label);
            return false;
        },
        minLength: 1
    });

    var url3 = '@Url.RouteUrl("DefaultApi", 
    new { httproute = "", controller = "DepartmentApi" })';
    $('#dept').autocomplete({
        autoFocus: true,
        source: function (request, response) {
            $.ajax({
                url: url3,
                data: { query: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.DepartmentName
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#dept').val(ui.item.label);
            $('#Id').val(ui.item.label);
            return false;
        },
        minLength: 1
    });

    var url4 = '@Url.RouteUrl("DefaultApi", 
    new { httproute = "", controller = "CategoryApi" })';
    $('#cat').autocomplete({
        autoFocus: true,
        source: function (request, response) {
            $.ajax({
                url: url4,
                data: { query: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.CategoryName
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#cat').val(ui.item.label);
            $('#Id').val(ui.item.label);
            return false;
        },
        minLength: 1
    });

    var url5 = '@Url.RouteUrl("DefaultApi", 
    new { httproute = "", controller = "SubcategoryApi" })';
    $('#subcat').autocomplete({
        autoFocus: true,
        source: function (request, response) {
            $.ajax({
                url: url5,
                data: { query: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.SubcategoryName
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#subcat').val(ui.item.label);
            $('#Id').val(ui.item.label);
            return false;
        },
        minLength: 1
    });
</script> 

<!--Validation scripts-->
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
