@using System.Web.Optimization;
@model RecOutletWarehouse.Models.ItemManagement.Item

@{
    ViewBag.Title = "Item Creation";
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}

<h2>Add a New Item to the Database</h2>

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Vendor Information</legend>
        <table>
            <tr>
                <td>Vendor Name:</td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Vendor, new { @id = "vendor" })
                        @Html.ValidationMessageFor(model => model.Vendor)
                    </div>
                </td>
                <td>Product Line:</td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.ProductLine, new { @id = "productLine" })
                        @Html.ValidationMessageFor(model => model.ProductLine)
                    </div>
                </td>
                <td>Vendor's Item #:</td>
                <td>
                    <div class="editor-field">
                        @Html.EditorFor(model => model.VendorItemID)
                        @Html.ValidationMessageFor(model => model.VendorItemID)
                        <a href="#">What's this?</a>
                    </div>    
                </td>
            </tr>
        </table>

    </fieldset>
    <fieldset>
        <legend>Item Information</legend>
        <table>
            <tr>
                <td>Item UPC:</td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.UPC)
                        @Html.ValidationMessageFor(model => model.UPC)
                    </div>
                </td>
                <td>Item Name:</td>
                <td colspan="3">
                    <div class="editor-field">
                        @Html.EditorFor(model => model.ItemName)
                        @Html.ValidationMessageFor(model => model.ItemName)
                    </div>
                </td>
            </tr>
            <tr>
                <td colspan="6">
                    <div class="editor-field">
                        Type a description for the item:<br />
                        @Html.TextAreaFor(model => model.ItemDescription)
                        @Html.ValidationMessageFor(model => model.ItemDescription)
                    </div>
                </td>
            </tr>
            <tr>
                <td>Department:</td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Department, new { @id = "dept" })
                        @Html.ValidationMessageFor(model => model.Department)
                    </div>
                </td>
                <td>Category:</td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Category, new { @id = "cat" })
                        @Html.ValidationMessageFor(model => model.Category)
                    </div>
                </td>
                <td>Sub-category:</td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Subcategory, new { @id = "subcat" })
                        @Html.ValidationMessageFor(model => model.Subcategory)
                    </div>
                </td>
            </tr>
        </table>

    </fieldset>
    
    <fieldset>
        <legend>Pricing and Other Sale Information</legend>

        <table>
            <tr>
                <td>MSRP:</td>
                <td>
                    <div class="editor-field">
                        @Html.EditorFor(model => model.MSRP)
                        @Html.ValidationMessageFor(model => model.MSRP)
                    </div>
                </td>
                <td>Regular Selling Price:</td>
                <td>
                    <div class="editor-field">
                        @Html.EditorFor(model => model.SellPrice)
                        @Html.ValidationMessageFor(model => model.SellPrice)
                    </div>
                </td>
                <td>Restricted Age:</td>
                <td>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.restrictedAge)
                        @Html.ValidationMessageFor(model => model.restrictedAge)
                    </div>
                </td>
            </tr>
            <tr>
                <td>Seasonal Code:</td>
                <td colspan="5">
                    <div class="editor-field">
                        @Html.RadioButtonFor(model => model.SeasonCode, "All") All                      
                        @Html.RadioButtonFor(model => model.SeasonCode, "Fall") Fall
                        @Html.RadioButtonFor(model => model.SeasonCode, "Winter") Winter 
                        @Html.RadioButtonFor(model => model.SeasonCode, "Spring") Spring
                        @Html.RadioButtonFor(model => model.SeasonCode, "Summer") Summer
                        @Html.ValidationMessageFor(model => model.SeasonCode)
                    </div>
                </td>
            </tr>
        </table>

    </fieldset>
    <!--Fields that still need to be worked with-->
        <div class="editor-label">
            @Html.LabelFor(model => model.RecRPC)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.RecRPC)
            @Html.ValidationMessageFor(model => model.RecRPC)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.ItemId)
        </div>
        <div class="editor-field">
            @Html.ValidationMessageFor(model => model.ItemId)
        </div>
    <!--End TODOS-->
    
        <p>
            <input type="submit" value="Create New Item" />
            <input type='button' value="Cancel" onclick="prompt()" />
        </p>

}

<script>
    function prompt() {
        var p = confirm("Are you sure you want to exit without creating the item?");

        if (p == true) {
            window.location = "@Url.Action("Index", "Home")"
        }
    }
</script>

    <script type="text/javascript">
        var url = '@Url.RouteUrl("DefaultApi", 
        new { httproute = "", controller = "VendorApi" })';
        $('#vendor').autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: url,
                    data: { query: request.term },
                    dataType: 'json',
                    type: 'GET',
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.VendorName,
                                value: item.VendorId
                            }
                        }));
                    }
                })
            },
            select: function (event, ui) {
                $('#vendor').val(ui.item.label);
                $('#Id').val(ui.item.value);
                return false;
            },
            minLength: 1
        });

        var url2 = '@Url.RouteUrl("DefaultApi", 
        new { httproute = "", controller = "ProductLineApi" })';
        $('#productLine').autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: url2,
                    data: { query: request.term },
                    dataType: 'json',
                    type: 'GET',
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.ProductLineName,
                                value: item.ProductLineId
                            }
                        }));
                    }
                })
            },
            select: function (event, ui) {
                $('#productLine').val(ui.item.label);
                $('#Id').val(ui.item.value);
                return false;
            },
            minLength: 1
        });

        var url3 = '@Url.RouteUrl("DefaultApi", 
        new { httproute = "", controller = "DepartmentApi" })';
        $('#dept').autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: url3,
                    data: { query: request.term },
                    dataType: 'json',
                    type: 'GET',
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.DepartmentName,
                                value: item.DepartmentId
                            }
                        }));
                    }
                })
            },
            select: function (event, ui) {
                $('#dept').val(ui.item.label);
                $('#Id').val(ui.item.value);
                return false;
            },
            minLength: 1
        });

        var url4 = '@Url.RouteUrl("DefaultApi", 
        new { httproute = "", controller = "CategoryApi" })';
        $('#cat').autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: url4,
                    data: { query: request.term },
                    dataType: 'json',
                    type: 'GET',
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.CategoryName,
                                value: item.CategoryId
                            }
                        }));
                    }
                })
            },
            select: function (event, ui) {
                $('#cat').val(ui.item.label);
                $('#Id').val(ui.item.value);
                return false;
            },
            minLength: 1
        });

        var url5 = '@Url.RouteUrl("DefaultApi", 
        new { httproute = "", controller = "SubcategoryApi" })';
        $('#subcat').autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: url5,
                    data: { query: request.term },
                    dataType: 'json',
                    type: 'GET',
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.SubcategoryName,
                                value: item.SubcategoryId
                            }
                        }));
                    }
                })
            },
            select: function (event, ui) {
                $('#subcat').val(ui.item.label);
                $('#Id').val(ui.item.value);
                return false;
            },
            minLength: 1
        });
    </script> 

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

 
}
