@model RecOutletWarehouse.Controllers.VendorController.ProductLineSalesRepViewModel

@{
    ViewBag.Title = "EditProductLine";
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}

<script>
    $(document).ready(function () {
        $(function () {
            $('.newrep').hide();
            $('.existrep').hide();
        });

        // This function shows / hides the "Existing Rep" and "Add new Sales Rep" divs
        // when the 'changerep' radio button is changed.
        $("input:radio[name$='changerep']").click(function () {
            var $this = $(this);
            if ($this.val() == "existing") {
                $('.existrep').show();
                // Auto-fill the current sales rep's name for the search field
                $('#searchrep').val('@Html.DisplayFor(model => model.productLine.SALES_REP.SalesRepFirstName) @Html.DisplayFor(model => model.productLine.SALES_REP.SalesRepLastName)');
                $('.newrep').hide();
                $('.newrepinput').val('');
            } else if ($this.val() == "new") {
                $('.existrep').hide();
                $('.newrep').show();
                $('.searchrep').val('');
            }
            else {
                $('.existrep').hide();
                $('#searchrep').val('@Html.DisplayFor(model => model.productLine.SALES_REP.SalesRepFirstName) @Html.DisplayFor(model => model.productLine.SALES_REP.SalesRepLastName)');
                $('.newrep').hide();
                $('.newrep').val('');
            }
        });
    });
</script>

<h2>@Html.DisplayFor(model => model.productLine.ProductLineName) - Edit</h2>

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Product Line Information</legend>

        @* Persist product line and sales rep info to make validator happy *@
        @Html.HiddenFor(model => model.productLine.ProductLineID)
        @Html.HiddenFor(model => model.productLine.VendorID)
        @Html.HiddenFor(model => model.productLine.SALES_REP.SalesRepFirstName)
        @Html.HiddenFor(model => model.productLine.SALES_REP.SalesRepLastName)
        @Html.HiddenFor(model => model.productLine.SALES_REP.SalesRepPhone)
        @Html.HiddenFor(model => model.productLine.SALES_REP.SalesRepEmail)

        <div class="editor-label">
            Product Line Name
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.productLine.ProductLineName)
            @Html.ValidationMessageFor(model => model.productLine.ProductLineName)
        </div>

        <div class="editor-label">
            Vendor
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.vendorName, new { @id = "vendor" })
            @Html.ValidationMessageFor(model => model.vendorName)
        </div>

        <div>
            Change Sales Rep: <input type="radio" name="changerep" checked value="no"/>No <input type="radio" name="changerep" value="existing"/>Yes (existing rep) <input type="radio" name="changerep" value="new" />Yes (new rep)
            <br />@Html.ValidationMessageFor(newPL => newPL.rep.RepID)
        </div>

        @Html.HiddenFor(model => model.productLine.RepID)
        @Html.HiddenFor(model => model.productLine.SALES_REP.RepID) @* Required for instances where the sales rep IS NOT modified *@

        <div class="existrep">
            <div>Find an existing rep</div>
            <ul class="no-list">
            
                <li>Rep Name<strong class="required">*</strong> <input type="text" id="searchrep" /></li>
            </ul>
            @Html.HiddenFor(model => model.existingRepFirst, new { @id = "existFirst" }) 
            @Html.HiddenFor(model => model.existingRepLast, new { @id = "existLast" })
        </div>
    
        <div class="newrep">
            <div>New sales representative information</div>
            <table>
                <tr>
                    <td>First Name<strong class="required">*</strong> @Html.TextBoxFor(newPL => newPL.newRepFirst, new { @class="newrepinput" })</td>
                    <td>Last Name<strong class="required">*</strong> @Html.TextBoxFor(newPL => newPL.newRepLast, new { @class="newrepinput" })</td>
                </tr>
                <tr>
                    <td>Rep phone number<strong class="required">*</strong> @Html.TextBoxFor(newPL => newPL.newRepPhone, new { @class="newrepinput", @id="PhoneNumber" })</td>
                    <td>&nbsp Rep Email address @Html.TextBoxFor(newPL => newPL.newRepEmail, new { @class="newrepinput", @id="PhoneNumber"})</td>
                </tr>
            </table>
        </div>

        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "BrowseVendors")
</div>

<script>
    // jQuery autocomplete for Vendor Name follows
    $('#vendor').autocomplete({
        autoFocus: true, // Automatically select first list item if user presses tab or enter
        source: function (request, response) {
            $.ajax({
                url: '@Url.RouteUrl("DefaultApi", new { httproute = "", controller = "VendorApi" })', // API method call to interact with database
                data: { query: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.VendorName
                        }
                    }).slice(0,10)); // Restrict to 10 items in the list
                }
            })
        },
        select: function (event, ui) {
            $('#vendor').val(ui.item.label); // Change this DOM ID when an item is selected
            return false;
        },
        minLength: 1 // Only autocomplete after one character has been typed
    });

    // jQuery autocomplete for sales rep name follows
    $('#searchrep').autocomplete({
        autoFocus: true,
        source: function (request, response) {
            $.ajax({
                url: '@Url.RouteUrl("DefaultApi", new { httproute = "", controller = "SalesRepApi" })',
                data: { query: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.SalesRepFirstName + " " + item.SalesRepLastName,
                            first: item.SalesRepFirstName,
                            last: item.SalesRepLastName
                        }
                    }).slice(0,10));
                }
            })
        },
        select: function (event, ui) {
            $('#searchrep').val(ui.item.label);
            $('#existFirst').val(ui.item.first);
            $('#existLast').val(ui.item.last);
            return false;
        },
        minLength: 1
    });
</script>
@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@
